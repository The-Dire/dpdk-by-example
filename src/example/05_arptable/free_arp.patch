diff --git a/src/example/04_icmp/Makefile b/src/example/04_icmp/Makefile
index 1a0fc7d..4ddcb57 100644
--- a/src/example/04_icmp/Makefile
+++ b/src/example/04_icmp/Makefile
@@ -2,10 +2,10 @@
 # Copyright(c) 2010-2014 Intel Corporation
 
 # binary name
-APP = dpdk_icmp
+APP = dpdk_arptable
 
 # all source are stored in SRCS-y
-SRCS-y := icmp_implement.c
+SRCS-y := arptable_implement.c
 
 # Build using pkg-config variables if possible
 ifeq ($(shell pkg-config --exists libdpdk && echo 0),0)
diff --git a/src/example/04_icmp/icmp_implement.c b/src/example/04_icmp/icmp_implement.c
index 08cfe66..7443762 100644
--- a/src/example/04_icmp/icmp_implement.c
+++ b/src/example/04_icmp/icmp_implement.c
@@ -2,12 +2,19 @@
 #include <rte_ethdev.h>
 #include <rte_mbuf.h>
 
+#include <rte_malloc.h>
+#include <rte_timer.h> // 定时器,用来定时发送广播 arp
+
 #include <stdio.h>
 #include <netinet/in.h>
 
+#include "arp.h"
+
 #define NUM_MBUFS (4096-1)
 
 #define BURST_SIZE	32
+// 每隔TIMER_RESOLUTION_CYCLES广播arp(发送广播 arp)
+#define TIMER_RESOLUTION_CYCLES 120000000000ULL // 10ms * 1000 = 10s * 6 
 
 /* utils */
 #define rte_htons rte_cpu_to_be_16
@@ -62,6 +69,9 @@ static uint8_t g_dst_mac[RTE_ETHER_ADDR_LEN];
 
 static uint16_t g_src_port;
 static uint16_t g_dst_port;
+
+static uint8_t g_default_arp_mac[RTE_ETHER_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
+
 // 绑定网卡,初始化dpdk端口
 static void ht_init_port(struct rte_mempool *mbuf_pool) {
 
@@ -171,12 +181,18 @@ static struct rte_mbuf * ht_send_udp(struct rte_mempool *mbuf_pool, uint8_t *dat
 /* end of udp */
 
 /* arp组包发包相关模块 */
-// 构建arp response包
-static int ht_encode_arp_pkt(uint8_t *msg, uint8_t *dst_mac, uint32_t sip, uint32_t dip) {
+// 构建arp response包. 自定义opcode 1为request,2为response
+static int ht_encode_arp_pkt(uint8_t *msg, uint16_t opcode, uint8_t *dst_mac, uint32_t sip, uint32_t dip) {
   // 1 ethhdr
   struct rte_ether_hdr *eth = (struct rte_ether_hdr *)msg;
   rte_memcpy(eth->s_addr.addr_bytes, g_src_mac, RTE_ETHER_ADDR_LEN);
-  rte_memcpy(eth->d_addr.addr_bytes, dst_mac, RTE_ETHER_ADDR_LEN);
+  // 如果目的mac与g_default_arp_mac地址一致,还要特殊处理以太网头mac地址字段
+  if (!strncmp((const char *)dst_mac, (const char *)g_default_arp_mac, RTE_ETHER_ADDR_LEN)) {
+    uint8_t mac[RTE_ETHER_ADDR_LEN] = {0x0};
+    rte_memcpy(eth->d_addr.addr_bytes, mac, RTE_ETHER_ADDR_LEN);
+  } else {
+    rte_memcpy(eth->d_addr.addr_bytes, dst_mac, RTE_ETHER_ADDR_LEN);
+  }
   eth->ether_type = rte_htons(RTE_ETHER_TYPE_ARP);
 
   // 2 arp 
@@ -185,7 +201,7 @@ static int ht_encode_arp_pkt(uint8_t *msg, uint8_t *dst_mac, uint32_t sip, uint3
   arp->arp_protocol = rte_htons(RTE_ETHER_TYPE_IPV4);
   arp->arp_hlen = RTE_ETHER_ADDR_LEN; // 硬件地址长度
   arp->arp_plen = sizeof(uint32_t); // 软件地址长度
-  arp->arp_opcode = rte_htons(2); // 2为response,1为request
+  arp->arp_opcode = rte_htons(opcode); // 2为response,1为request
   rte_memcpy(arp->arp_data.arp_sha.addr_bytes, g_src_mac, RTE_ETHER_ADDR_LEN);
   rte_memcpy(arp->arp_data.arp_tha.addr_bytes, dst_mac, RTE_ETHER_ADDR_LEN);
 
@@ -196,7 +212,7 @@ static int ht_encode_arp_pkt(uint8_t *msg, uint8_t *dst_mac, uint32_t sip, uint3
 }
 
 // 发送arp response
-static struct rte_mbuf *ht_send_arp(struct rte_mempool *mbuf_pool, uint8_t *dst_mac, uint32_t sip, uint32_t dip) {
+static struct rte_mbuf *ht_send_arp(struct rte_mempool *mbuf_pool, uint16_t opcode, uint8_t *dst_mac, uint32_t sip, uint32_t dip) {
   // 14 + 28, eth头14字节,arp头28字节
   const unsigned total_length = sizeof(struct rte_ether_hdr) + sizeof(struct rte_arp_hdr);
 
@@ -209,7 +225,7 @@ static struct rte_mbuf *ht_send_arp(struct rte_mempool *mbuf_pool, uint8_t *dst_
   mbuf->data_len = total_length;
 
   uint8_t *pkt_data = rte_pktmbuf_mtod(mbuf, uint8_t *);
-  ht_encode_arp_pkt(pkt_data, dst_mac, sip, dip);
+  ht_encode_arp_pkt(pkt_data, opcode, dst_mac, sip, dip);
 
   return mbuf;
 }
@@ -296,6 +312,43 @@ static struct rte_mbuf *ht_send_icmp(struct rte_mempool *mbuf_pool, uint8_t *dst
 }
 /* end of icmp */
 
+void print_ethaddr(const char *name, const struct rte_ether_addr *eth_addr)
+{
+	char buf[RTE_ETHER_ADDR_FMT_SIZE];
+	rte_ether_format_addr(buf, RTE_ETHER_ADDR_FMT_SIZE, eth_addr);
+	printf("%s%s", name, buf);
+}
+
+/* begin of free arp request send */
+void arp_request_timer_callback(__attribute__((unused)) struct rte_timer *tim,
+  void *arg) {
+  // 发送arp request所需的mbuf
+  struct rte_mempool *mbuf_pool = (struct rte_mempool *)arg;
+  // 定时发送
+  int i = 0;
+  for (i = 1; i <= 254; i++) { // 局域网每一台机器都发送一个arp request
+    uint32_t dst_ip = (g_local_ip & 0x00FFFFFF) | (0xFF000000 & (i << 24));
+
+    char ip_buf[16] = {0};
+    printf("arp ---> src: %s ----- %d\n", inet_ntoa2(dst_ip, ip_buf), i);
+
+    struct rte_mbuf* arp_buf = NULL;
+    uint8_t *dst_mac = ht_get_dst_macaddr(dst_ip);
+    // 如果arp table里面没有对应dst ip地址,那么arp hdr和ether hdr中的dmac字段自己构造发送.
+    if (dst_mac == NULL) {
+			// arp hdr --> mac : FF:FF:FF:FF:FF:FF
+			// ether hdr --> mac : 00:00:00:00:00:00
+			arp_buf = ht_send_arp(mbuf_pool, RTE_ARP_OP_REQUEST, g_default_arp_mac, g_local_ip, dst_ip); 
+    } else { // 常规的arp request发送
+      arp_buf = ht_send_arp(mbuf_pool, RTE_ARP_OP_REQUEST, dst_mac, g_local_ip, dst_ip);
+    }
+
+    rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
+    rte_pktmbuf_free(arp_buf);
+  }
+}
+/* end of free arp */
+
 int main(int argc, char *argv[]) {
   // dpdk环境初始化,巨页,内存,cpu亲和等的设置
   if (rte_eal_init(argc, argv) < 0) {
@@ -312,6 +365,18 @@ int main(int argc, char *argv[]) {
   // 获取网卡mac地址,用于ng_encode_udp_pkt函数中组建ether头
   rte_eth_macaddr_get(g_dpdk_port_id, (struct rte_ether_addr *)g_src_mac);
 
+  /* 定时器初始化 */
+  rte_timer_subsystem_init();
+  // 初始化定时器结构arp_timer
+  struct rte_timer arp_timer;
+  rte_timer_init(&arp_timer);
+  // 获取定时器频率,设置定时器
+  uint64_t hz = rte_get_timer_hz();
+  unsigned lcore_id = rte_lcore_id();
+  // PERIODICAL代表多次触发,SINGLE则定时器单次触发
+  rte_timer_reset(&arp_timer, hz, PERIODICAL, lcore_id, arp_request_timer_callback, mbuf_pool);
+  /*end of timer init */
+
   while (1) {
     struct rte_mbuf *mbufs[BURST_SIZE];
     // 第一个参数为端口id(对应网络适配器),第二个参数是指定对应队列,第三个参数是mbufs从内存池里分配的数据
@@ -337,11 +402,42 @@ int main(int argc, char *argv[]) {
         printf(" local: %s \n", inet_ntoa2(g_local_ip, ip_buf));
         // 由于arp request是广播,判断目标地址相同才返回arp response
         if (arp_hdr->arp_data.arp_tip == g_local_ip) {
-          // 接收到arp request包后返回arp response。注:request里的源ip是response里的目的ip
-          struct rte_mbuf *arp_buf = ht_send_arp(mbuf_pool, arp_hdr->arp_data.arp_sha.addr_bytes, 
-            arp_hdr->arp_data.arp_tip, arp_hdr->arp_data.arp_sip);
-          rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
-          rte_pktmbuf_free(arp_buf);
+          if (arp_hdr->arp_opcode == rte_htons(RTE_ARP_OP_REQUEST)) {
+            printf("arp --> request\n");
+            // 接收到arp request包后返回arp response。注:request里的源ip是response里的目的ip
+            struct rte_mbuf *arp_buf = ht_send_arp(mbuf_pool, RTE_ARP_OP_REPLY, arp_hdr->arp_data.arp_sha.addr_bytes, 
+              arp_hdr->arp_data.arp_tip, arp_hdr->arp_data.arp_sip);
+            rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
+            rte_pktmbuf_free(arp_buf);
+            // 处理arp响应的流程(这里对端发送arp reply,这个值要记录到arp表里)
+          } else if (arp_hdr->arp_opcode == rte_htons(RTE_ARP_OP_REPLY)) {
+            printf("arp --> reply\n");
+            
+            uint8_t *hw_addr = ht_get_dst_macaddr(arp_hdr->arp_data.arp_sip);
+            // 如果接收到了arp reply,但是查表找不到对应的mac地址则插入表中
+            if (hw_addr == NULL) {
+              // 结点初始化
+              arp_entry *new_entry = rte_malloc("arp_entry", sizeof(arp_entry), 0);
+
+              new_entry->ip = arp_hdr->arp_data.arp_sip;
+              rte_memcpy(new_entry->hw_addr, arp_hdr->arp_data.arp_sha.addr_bytes, RTE_ETHER_ADDR_LEN);
+              new_entry->type = 0;
+              // 线程不安全，这里应该改为cas原子操作
+              list_add_tail(&new_entry->entry, &arp_table);
+              arp_count++;
+            }
+
+            struct list_head *iter;
+            list_for_each(iter, &arp_table) {
+              arp_entry *addr = list_entry(iter, arp_entry, entry);
+              char ip_buf[16] = {0};
+
+              print_ethaddr("arp table --> mac: ", (struct rte_ether_addr *)addr->hw_addr);
+
+              printf(" ip : %s \n", inet_ntoa2(addr->ip, ip_buf));
+            }
+
+          }
           rte_pktmbuf_free(mbufs[i]);
         }
         continue;
@@ -404,5 +500,17 @@ int main(int argc, char *argv[]) {
         }
       }
     }
+
+    // 启动定时器,定时执行arp_request_timer_callback函数回调
+    uint64_t prev_tsc = 0, cur_tsc; // 上一次时间, 当前时间
+    uint64_t diff_tsc;
+
+    cur_tsc = rte_rdtsc();
+    diff_tsc = cur_tsc - prev_tsc;
+    if (diff_tsc > TIMER_RESOLUTION_CYCLES) {
+      rte_timer_manage();
+      prev_tsc = cur_tsc;
+    }
+
   }
 }
