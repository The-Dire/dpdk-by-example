diff --git a/src/example/05_arptable/arptable_implement.c b/src/example/05_arptable/arptable_implement.c
index 32bb73a..47fea1f 100644
--- a/src/example/05_arptable/arptable_implement.c
+++ b/src/example/05_arptable/arptable_implement.c
@@ -5,6 +5,8 @@
 #include <rte_malloc.h>
 #include <rte_timer.h> // 定时器,用来定时发送广播 arp
 
+#include <rte_ring.h> // dpdk 队列库
+
 #include <stdio.h>
 #include <netinet/in.h>
 
@@ -13,6 +15,7 @@
 #define NUM_MBUFS (4096-1)
 
 #define BURST_SIZE	32
+#define RING_SIZE	1024
 // 每隔TIMER_RESOLUTION_CYCLES广播arp(发送广播 arp)
 #define TIMER_RESOLUTION_CYCLES 120000000000ULL // 10ms * 1000 = 10s * 6 
 
@@ -72,6 +75,24 @@ static uint16_t g_dst_port;
 
 static uint8_t g_default_arp_mac[RTE_ETHER_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 
+// 两个ring队列,一个收包队列收包后存入用来解析协议
+// 一个发包队列待发的包存入
+// 这样做收发包可以分别通过两个不同的核心进行
+struct ring_buffer {
+  struct rte_ring *recv_ring;
+  struct rte_ring *send_ring;
+};
+
+// 只生成一个全局变量来管理ring
+struct ring_buffer *g_ring = NULL;
+// main函数中调用初始化全局队列
+void init_global_ring() {
+  if (g_ring == NULL) {
+    g_ring = rte_malloc("recv/send ring", sizeof(struct ring_buffer), 0);
+    memset(g_ring, 0, sizeof(struct ring_buffer));
+  }
+}
+
 // 绑定网卡,初始化dpdk端口
 static void ht_init_port(struct rte_mempool *mbuf_pool) {
 
@@ -324,6 +345,11 @@ void arp_request_timer_callback(__attribute__((unused)) struct rte_timer *tim,
   void *arg) {
   // 发送arp request所需的mbuf
   struct rte_mempool *mbuf_pool = (struct rte_mempool *)arg;
+  // 不直接发送,送入待发送队列中等待其他核心进行发送处理
+  // (这里为了简单还是在main中发送的,而收包则是存入recv_ring里
+  // 由另外一个绑核线程进行协议解析)
+  struct rte_ring *send_ring = g_ring->send_ring;
+  
   // 定时发送
   int i = 0;
   for (i = 1; i <= 254; i++) { // 局域网每一台机器都发送一个arp request
@@ -343,51 +369,29 @@ void arp_request_timer_callback(__attribute__((unused)) struct rte_timer *tim,
       arp_buf = ht_send_arp(mbuf_pool, RTE_ARP_OP_REQUEST, dst_mac, g_local_ip, dst_ip);
     }
 
-    rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
-    rte_pktmbuf_free(arp_buf);
+    //rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
+    //rte_pktmbuf_free(arp_buf);
+    // 待发送的arp包存入队列中
+    rte_ring_mp_enqueue_burst(send_ring, (void**)&arp_buf, 1, NULL);
   }
 }
 /* end of free arp */
 
-int main(int argc, char *argv[]) {
-  // dpdk环境初始化,巨页,内存,cpu亲和等的设置
-  if (rte_eal_init(argc, argv) < 0) {
-    rte_exit(EXIT_FAILURE, "Error with EAL init\n");
-  }
-  // 构造内存池,收发的数据都要放入其中
-  struct rte_mempool *mbuf_pool = rte_pktmbuf_pool_create("mbuf pool", NUM_MBUFS,
-    0, 0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());
-  if (mbuf_pool == NULL) {
-    rte_exit(EXIT_FAILURE, "Could not create mbuf pool\n");
-  }
-
-  ht_init_port(mbuf_pool);
-  // 获取网卡mac地址,用于encode_udp_pkt函数中组建ether头
-  rte_eth_macaddr_get(g_dpdk_port_id, (struct rte_ether_addr *)g_src_mac);
-
-  /* 定时器初始化 */
-  rte_timer_subsystem_init();
-  // 初始化定时器结构arp_timer
-  struct rte_timer arp_timer;
-  rte_timer_init(&arp_timer);
-  // 获取定时器频率,设置定时器
-  uint64_t hz = rte_get_timer_hz();
-  unsigned lcore_id = rte_lcore_id();
-  // PERIODICAL代表多次触发,SINGLE则定时器单次触发
-  rte_timer_reset(&arp_timer, hz, PERIODICAL, lcore_id, arp_request_timer_callback, mbuf_pool);
-  /*end of timer init */
+int ht_pkt_process(void *arg) {
 
+  struct rte_mempool *mbuf_pool = (struct rte_mempool *)arg;
+  struct rte_ring *recv_ring = g_ring->recv_ring;
+  struct rte_ring *send_ring = g_ring->send_ring;
+  
+  
   while (1) {
     struct rte_mbuf *mbufs[BURST_SIZE];
-    // 第一个参数为端口id(对应网络适配器),第二个参数是指定对应队列,第三个参数是mbufs从内存池里分配的数据
-    // 接收数据包,最大数据包数量在init_port中rte_eth_rx_queue_setup设置,设置为128
-    unsigned num_recvd = rte_eth_rx_burst(g_dpdk_port_id, 0, mbufs, BURST_SIZE);
-    if (num_recvd > BURST_SIZE) {
-      rte_exit(EXIT_FAILURE, "Error receiving from eth\n");
-    }
-    // 操作数据包
+    // 线程安全的消费者消费(出队)
+    // 和之前比只是把获取mbufs(数据包)的操作从rte_eth_rx_burst改为从recv_ring从获取。
+    // 当然与之对应的，rte_eth_rx_burst中的数据包要在收到后送入recv_ring中
+    unsigned num_recvd = rte_ring_mc_dequeue_burst(recv_ring, (void**)mbufs, BURST_SIZE, NULL);
     unsigned i = 0;
-    for (i = 0;i < num_recvd;i ++) {
+    for (i = 0;i < num_recvd; i++) {
       // 从mbufs[i]内存中取出数据包,先解析Ethernet头
       struct rte_ether_hdr *ehdr = rte_pktmbuf_mtod(mbufs[i], struct rte_ether_hdr*);
       
@@ -407,8 +411,10 @@ int main(int argc, char *argv[]) {
             // 接收到arp request包后返回arp response。注:request里的源ip是response里的目的ip
             struct rte_mbuf *arp_buf = ht_send_arp(mbuf_pool, RTE_ARP_OP_REPLY, arp_hdr->arp_data.arp_sha.addr_bytes, 
               arp_hdr->arp_data.arp_tip, arp_hdr->arp_data.arp_sip);
-            rte_eth_tx_burst(g_dpdk_port_id, 0, &arp_buf, 1);
-            rte_pktmbuf_free(arp_buf);
+            //rte_eth_tx_burst(g_dpdk_port_id, 0, &arpbuf, 1);
+            //rte_pktmbuf_free(arp_buf);
+            // 带有rte_eth_tx_burst改成全改成入队即可.放入到send ring中处理
+            rte_ring_mp_enqueue_burst(send_ring, (void**)&arp_buf, 1, NULL);
             // 处理arp响应的流程(这里对端发送arp reply,这个值要记录到arp表里)
           } else if (arp_hdr->arp_opcode == rte_htons(RTE_ARP_OP_REPLY)) {
             printf("arp --> reply\n");
@@ -474,8 +480,10 @@ int main(int argc, char *argv[]) {
 
         // 发送udp echo
         struct rte_mbuf *txbuf = ht_send_udp(mbuf_pool, (uint8_t *)(udphdr+1), length);
-        rte_eth_tx_burst(g_dpdk_port_id, 0, &txbuf, 1);// rte_eth_rx_burst发送数据
-        rte_pktmbuf_free(txbuf); // 发送用的mbuf同样放回到内存池中
+        // rte_eth_tx_burst(g_dpdk_port_id, 0, &txbuf, 1);// rte_eth_rx_burst发送数据
+        // rte_pktmbuf_free(txbuf); // 发送用的mbuf同样放回到内存池中
+        // 发送udp echo通过送入队列中，在main中从队列取出再发送
+        rte_ring_mp_enqueue_burst(send_ring, (void**)&txbuf, 1, NULL);
 
         rte_pktmbuf_free(mbufs[i]); // 放回内存池
       }
@@ -493,13 +501,97 @@ int main(int argc, char *argv[]) {
           struct rte_mbuf *txbuf = ht_send_icmp(mbuf_pool, ehdr->s_addr.addr_bytes,
             iphdr->dst_addr, iphdr->src_addr, icmphdr->icmp_ident, icmphdr->icmp_seq_nb);
 
-          rte_eth_tx_burst(g_dpdk_port_id, 0, &txbuf, 1);
-          rte_pktmbuf_free(txbuf);
+          // rte_eth_tx_burst(g_dpdk_port_id, 0, &txbuf, 1);
+          // rte_pktmbuf_free(txbuf);
+          rte_ring_mp_enqueue_burst(send_ring, (void**)&txbuf, 1, NULL);
 
           rte_pktmbuf_free(mbufs[i]);
         }
       }
     }
+  }
+  return 0;
+}
+
+int main(int argc, char *argv[]) {
+  // dpdk环境初始化,巨页,内存,cpu亲和等的设置
+  if (rte_eal_init(argc, argv) < 0) {
+    rte_exit(EXIT_FAILURE, "Error with EAL init\n");
+  }
+  // 构造内存池,收发的数据都要放入其中
+  struct rte_mempool *mbuf_pool = rte_pktmbuf_pool_create("mbuf pool", NUM_MBUFS,
+    0, 0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());
+  if (mbuf_pool == NULL) {
+    rte_exit(EXIT_FAILURE, "Could not create mbuf pool\n");
+  }
+
+  ht_init_port(mbuf_pool);
+  // 获取网卡mac地址,用于encode_udp_pkt函数中组建ether头
+  rte_eth_macaddr_get(g_dpdk_port_id, (struct rte_ether_addr *)g_src_mac);
+
+  /* 定时器初始化 */
+  rte_timer_subsystem_init();
+  // 初始化定时器结构arp_timer
+  struct rte_timer arp_timer;
+  rte_timer_init(&arp_timer);
+  // 获取定时器频率,设置定时器
+  uint64_t hz = rte_get_timer_hz();
+  unsigned lcore_id = rte_lcore_id();
+  // PERIODICAL代表多次触发,SINGLE则定时器单次触发
+  rte_timer_reset(&arp_timer, hz, PERIODICAL, lcore_id, arp_request_timer_callback, mbuf_pool);
+  /*end of timer init */
+
+  // 创建ring buffer并初始化
+  init_global_ring();
+  // q全局队列初始化失败,进行差错处理
+  if (g_ring == NULL) {
+    rte_exit(EXIT_FAILURE, "ring buffer init failed\n");
+  }
+
+  if (g_ring->recv_ring == NULL) {
+    // 内存中创建一个ring,第一个参数ring的名字,第二个参数ring的大小,第三个参数网口id,第四个参数是flag表明是单生产者或多生产者
+    g_ring->recv_ring = rte_ring_create("recv ring", RING_SIZE, rte_socket_id(), RING_F_SP_ENQ | RING_F_SC_DEQ);
+  }
+  if (g_ring->send_ring == NULL) {
+    g_ring->send_ring = rte_ring_create("send ring", RING_SIZE, rte_socket_id(), RING_F_SP_ENQ | RING_F_SC_DEQ);
+  }
+
+  // 启动另外一个线程用来进行包处理
+  /*
+  * 第一个参数:线程要执行的函数
+  * 第二个参数:传给线程的参数
+  * 第三个参数:设置cpu亲和性即该线程要绑定的核心
+  */
+  // 该函数即为开启另一个线程执行pkt_process函数并且把内存池mbuf传入进去
+  // 目前只开一个线程用来处理数据包(收包操作)
+  rte_eal_remote_launch(ht_pkt_process, mbuf_pool, rte_get_next_lcore(lcore_id, 1, 0));
+
+  while (1) {
+    // 改名字为rx_mbufs,因为该mbuf仅收包并做协议解析用
+    struct rte_mbuf *rx_mbufs[BURST_SIZE];
+    // 第一个参数为端口id(对应网络适配器),第二个参数是指定对应队列,第三个参数是rx_mbufs从内存池里分配的数据
+    // 接收数据包,最大数据包数量在init_port中rte_eth_rx_queue_setup设置,设置为128
+    unsigned num_recvd = rte_eth_rx_burst(g_dpdk_port_id, 0, rx_mbufs, BURST_SIZE);
+    if (num_recvd > BURST_SIZE) {
+      rte_exit(EXIT_FAILURE, "Error receiving from eth\n");
+    } else if (num_recvd > 0) {
+      // 接受到的包大于0,入队recv_ring中进行处理
+      rte_ring_sp_enqueue_burst(g_ring->recv_ring, (void**)rx_mbufs, num_recvd, NULL);
+    }
+
+    // tx_mbufs,发送数据包所需mbuf
+    struct rte_mbuf *tx_mbufs[BURST_SIZE];
+    // 从send_ring中取出然后发送数据包
+    unsigned num_send = rte_ring_sc_dequeue_burst(g_ring->send_ring, (void**)tx_mbufs, BURST_SIZE, NULL);
+    if (num_send > 0) {
+      // tx_mbufs是要发送的包,发送完成后需要释放mbuf
+      rte_eth_tx_burst(g_dpdk_port_id, 0, tx_mbufs, num_send);
+
+      unsigned i = 0;
+      for (i = 0; i < num_send; i++)
+        rte_pktmbuf_free(tx_mbufs[i]);
+
+    }
 
     // 启动定时器,定时执行arp_request_timer_callback函数回调
     uint64_t prev_tsc = 0, cur_tsc; // 上一次时间, 当前时间
